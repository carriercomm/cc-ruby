#!/usr/bin/env ruby

require 'yaml'
require File.expand_path("../../lib/config-chief", __FILE__)
require 'optparse'
begin
	gem 'eventmachine', '~>1.0.0.beta.4'
	gem 'faye', '~>0.8.0'

	require 'eventmachine'
	require 'faye'
rescue LoadError => exc
	warn "Cannot find required ruby gems needed to run this agent. Please install cloudblocks gem by running 'gem install cloudblocks'"
	warn exc
	exit -1
end

def stop
	puts "Stopping"
	EM.stop
	exit 0
end

config_file = 'cloudblocks.yaml'
config_dir = File.join(Dir.home, '.cloudblocks')
config_full = File.join(config_dir, config_file)

api_key = ''
faye_url = 'https://socket.thecloudblocks.com:8443/'

if File.exists?(config_full)	
	# config file present
	config = YAML::load(File.open(config_full))
	api_key = config['api_key']
else
	# no config file
	puts 'CloudBlocks ConfigChief'
	puts 'Please enter your API key. (you can find it at https://www.thecloudblocks.com/me):'
	api_key = gets
	api_key = api_key.chomp
	if api_key.length != 32
		puts 'Invalid API key'
		exit -1
	else
		if !FileTest::directory?(config_dir)
			Dir.mkdir(config_dir)
		end
		File.open(config_full, 'w+') { |out| YAML::dump({ 'api_key' => api_key }, out) }
		puts 'Configuration Saved'
	end
end

@version = 1
str_version = "0.0.#{@version}"
workspace = nil
key = nil
is_test = false
parameters = {}
url = nil
id = nil
OptionParser.new do |opts|
	opts.banner = 	<<-EOF
ConfigChief. v#{str_version} (c) 2012 CloudBlocks
For more information please visit http://www.thecloudblocks.com

Usage: chief [options]

Options:
EOF

	opts.on("-w", "--workspace WORKSPACE", "Workspace id") do |v|
		workspace = v
	end

	opts.on('-u', '--url URL', 'Server URL') do |v|
		url = v
	end
	url = url || 'https://api.thecloudblocks.com'

	opts.on('-k', '--key KEY', 'Config Key') do |v|
		key = v
	end

	opts.on('--api-key APIKEY', 'API key') do |v|
		api_key = v
	end

	opts.on('-i', '--id ID', 'Config Id') do |v|
		id = v
	end

	opts.on('-p', '--parameters P1=V1,P2=V2,...', Array, 'Optional Parameters') do |v|
		v.each do |p|
			pv = p.split('=')
			if pv.count != 2 || pv[0].nil? || pv[1].nil?
				warn 'Invalid Parameters. Use -h for help'
				exit -1
			end

			parameters = parameters.merge({pv[0].to_sym => pv[1]})
		end
	end

	opts.on('-t', '--test', 'Test mode. Shows updates received from the server') do |v|
		is_test = true
	end

	opts.on_tail("-h", "--help", "Show this message") do
		puts opts
		exit 0
	end
end.parse!

if workspace.nil?
	warn 'No workspace specified. Use --help for more info'
	exit -1 
end

if key.nil? && id.nil? && !is_test
	warn 'Either id (-i) or key (-k) have to be present'
	exit -1
end

if is_test
	EM.run {
	 	Signal.trap('INT') { stop }
	    Signal.trap('TERM'){ stop }

		puts "Listening for #{workspace}/keys now on #{faye_url}"
		client = Faye::Client.new(faye_url)
		client.subscribe("/#{workspace}/keys") do |message|
    		puts message.inspect
		end
	}
else
	chief = ConfigChief.new(:api_key => api_key, :workspace => workspace, :url => url)
	if (key.nil?)
		puts chief.get_by_id(id, {}, parameters)
	else
		# let's get to bussiness
		puts chief.get_by_key(key, {}, parameters)
	end
end