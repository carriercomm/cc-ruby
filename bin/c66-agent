#!/usr/bin/env ruby

require 'yaml'
require File.expand_path("../../lib/cloud-quartz", __FILE__)
require File.expand_path("../../lib/client_auth", __FILE__)
require 'optparse'
require 'socket'
require 'logger'
require 'highline/import'
begin
	gem 'eventmachine', '~>1.0.0.beta.4'
	gem 'faye', '~>0.8.3'
	gem 'highline', '~>1.6.11'

	require 'eventmachine'
	require 'faye'
rescue LoadError => exc
	warn "Cannot find required ruby gems needed to run this agent. Please install the cloud66 gem by running 'gem install cloud66'"
	warn exc
	exit -1
end

#statuses
ST_UNREGISTERED = 0
ST_STOPPED = 1
ST_STARTED = 2

private

def safefork
	tryagain = true

	while tryagain
		tryagain = false
		begin
		if pid = fork
			return pid
		end
		rescue Errno::EWOULDBLOCK
			sleep 5
			tryagain = true
		end
	end
end

def daemonize(oldmode=0, closefd=false)
	srand # Split rand streams between spawning and daemonized process
	safefork and exit # Fork and exit from the parent

	# Detach from the controlling terminal
	unless sess_id = Process.setsid
	  raise 'Cannot detach from controlled terminal'
	end

	# Prevent the possibility of acquiring a controlling terminal
	if oldmode.zero?
	  trap 'SIGHUP', 'IGNORE'
	  exit if pid = safefork
	end

	Dir.chdir "/"   # Release old working directory
	File.umask 0000 # Insure sensible umask

	if closefd
	  # Make sure all file descriptors are closed
	  ObjectSpace.each_object(IO) do |io|
	    unless [STDIN, STDOUT, STDERR].include?(io)
	      io.close rescue nil
	    end
	  end
	end

	STDIN.reopen "/dev/null"       # Free file descriptors and
	STDOUT.reopen "/dev/null", "a" # point them somewhere sensible
	STDERR.reopen STDOUT           # STDOUT/STDERR should go to a logfile
	return oldmode ? sess_id : 0   # Return value is mostly irrelevant
end

def save_config
	Dir.mkdir(@config_dir) if !FileTest::directory?(@config_dir)
	File.open(@config_full, 'w+') { |out| YAML::dump({ 'api_key' => @api_key, 'agent_id' => @agent_id, 'secret_key' => @secret_key }, out) }
end

def load_config
	if File.exists?(@config_full)
		# config file present
		config = YAML::load(File.open(@config_full))
		@api_key = config['api_key']
		@agent_id = config['agent_id']
		@secret_key = config['secret_key']
	else
		puts "This agent is not registered. To register it, please use the 'register' command."
		exit -1
	end
end

def delete_config
	File.delete(@config_full) if File.exists?(@config_full)	
end

def get_pid
	if File.exists?(@pid_full)
		file = File.new(@pid_full, "r")
		pid = file.read
		file.close
		pid
	else
		0
	end
end

def delete_pid
	File.delete(@pid_full) if get_pid != 0
end

def pid_process_running?(pid)
	begin
		pid_number = pid.to_i
		Process.getpgid(pid_number)
		true
	rescue Errno::ESRCH
		false
	end
end

def get_status
	pid = get_pid
	#check if the process is actually running
	return ST_STARTED if pid != 0 && pid_process_running?(pid)
	return ST_STOPPED if File.exists?(@config_full)  
	return ST_UNREGISTERED
end

public

def register

	if get_status != ST_UNREGISTERED
		begin
			unregister
		rescue
		end
	end

	puts 'Cloud 66 Agent Registration:' if @api_key.empty? || @secret_key.empty?
	# still no api key, we need to get it
	if @api_key.empty?		
		@api_key = ask('Please enter your API key. (you can find it at https://cloud66.com/me): ')
		if @api_key.length != 32
			puts 'Invalid API key'
			exit -1
		end
	end
	if @secret_key.empty?		
		@secret_key = ask('Please enter your Secret Key (you can find it at https://cloud66.com/me): ')
		if @secret_key.length != 32
			puts 'Invalid Secret key'
			exit -1
		end
	end

	@quartz = CloudQuartz.new(:api_key => @api_key, :url => @url, :secret_key => @secret_key)
	puts "Registering the Cloud 66 Agent..."

	os_name = RUBY_PLATFORM
	os_id = os_name.include?('darwin') ? 5 : 1
	
	timezone = Time.new.zone
	agent = { :agent_type_id => os_id, :agent_name => @name, :agent_timezone => timezone, :extra => os_name, :stack_uid => @stack_uid }
	result = @quartz.register(agent)

	if result['ok']
		@agent_id = result['uid']
		puts "Registered successfully (and now ready to be started)!"
		save_config
	else
		puts "Failed to register due to #{result['error']}"
		exit -1
	end
end

def unregister
	begin

		stop if get_status == ST_STARTED
		
		load_config	
		@quartz = CloudQuartz.new(:api_key => @api_key, :url => @url, :agent_id => @agent_id, :secret_key => @secret_key)
		
		puts "Unregistering the Cloud 66 Agent..."
		@agent_id = ""
		@quartz.unregister(@agent_id)

	rescue
	ensure
		delete_config
		puts "Unregistered successfully!"
	end
end

def stop(signalCatch = false)

	#signalCatch indicates a TERM or INT trap (where the app is already stopped, but server not told)
	if !signalCatch && get_status == ST_STOPPED
		puts "This agent was already stopped."

		#delete the pid file just in case its hanging around
		delete_pid
		
		exit -1
	end

	load_config	
	@quartz = CloudQuartz.new(:api_key => @api_key, :url => @url, :agent_id => @agent_id, :secret_key => @secret_key)
	puts "Stopping the Cloud 66 Agent..."
	@log.debug "Stopping the Cloud 66 Agent..."
	
	begin		
		@quartz.status(2)
		EM.stop		
	rescue
	end

	pid = get_pid
	if pid != 0
		begin
			Process.kill('TERM', pid.to_i)
		rescue
		end
	end
	delete_pid

	puts "Stopped successfully!"
	@log.debug "Stopped successfully!"
end


def start

	if get_status == ST_STARTED
		puts "This agent is already started. To stop it, please use the 'stop' command."
		exit -1
	end

	#we know it isn't running, so delete leftover pid file if it exists
	delete_pid 		

	load_config	
	@quartz = CloudQuartz.new(:api_key => @api_key, :url => @url, :agent_id => @agent_id, :secret_key => @secret_key)
	load_plugins

	begin
		@log.info @quartz.init(@version, plugin_meta_data)
	rescue => exc
		message = exc.message
		if message =~ /Couldn't find Agent with uid =/
			@log.warn "This agent is no longer registered at the server. The old registration details have been removed from this agent. Please re-run the agent to re-register it."
			puts "This agent is no longer registered at the server. The old registration details have been removed from this agent. Please re-run the agent to re-register it."
			puts @config_full
			File.delete(@config_full)
		else
			@log.error exc.message
		end
		exit -1
	end

	puts "Starting the Cloud 66 Agent..."
	if @daemon_mode
		daemonize
		pid = Process.pid
		begin
			file = File.new(@pid_full, "w")
			file.write(pid)
			file.close
		rescue => exc
			Process.kill('TERM', pid)
			warn "Cannot start the Cloud 66 Agent: #{exc.message}"
		end

		run
	else
		run
	end


	exit 0
end

private

def load_plugins
	@load_path = File.expand_path(File.join(File.dirname(__FILE__), '../lib/plugins'))
	@log.info "Loading plugins from #{@load_path}"

	files = Dir.glob("#{@load_path}/*.rb")
	files.each do |file|
		unless file =~ /quartz_plugin/

			# is it a valid plugin?
			require "#{file}"
			classname = File.basename(file, '.rb').split('_').collect{ |part| part.capitalize }.join
			begin
				clazz = Kernel.const_get(classname)
				if clazz.ancestors[1].name == 'QuartzPlugin'
					instance = clazz.new(@log, { :api_key => @api_key, :agent_id => @agent_id })
					guid = instance.info[:uid]
					@plugins = @plugins.merge({ guid => instance })
					@log.info "Found plugin #{instance.info[:name]}/#{instance.info[:version]} with uid #{guid}"
				else
					@log.error "Invalid plugin found #{clazz}"
				end
			rescue 
			end
		end
	end

	@log.debug "All plugins #{plugin_meta_data}"
end

def plugin_meta_data
	result = []
	@plugins.each do |k, v|
		result << v.info
	end

	result
end

def get_job
	begin
		result = @quartz.get_job
		if result['ok']
			if !result['empty']
				message = JSON.parse(result['message'])
				guid = message['plugin_uid']
				name = message['template_name']
				drt = message['desired_run_time']

				@log.info "Going to run #{name} (uid:#{guid})"

				# get the plugin
				if @plugins.include?(guid)
					plugin = @plugins[guid]
					# run it
					operation = proc { run_plugin(plugin, message) }
					EM.defer(operation)
				else
					@log.error "No plugin found with uid #{guid}"
					job_id = message['job_id']
					data = { :run_start => Time.now.utc.to_i, :run_end => Time.now.utc.to_i, :agent_uid => @agent_id, :ok => false, :fail_reason => "Requested plugin not found. Does this agent support this job type?" }
					@quartz.post_results(job_id, data)
				end
			#else
				#dropping this due to proliferation of log output
				#@log.debug 'No jobs to run'
			end
		else
			@log.error "Failed to retrieve job due to #{result['error']}"
		end
	rescue => exc
		@log.error "Failed to retrieve job due to #{exc}"
	end
end

def run_plugin(plugin, message)
	run_start = Time.now.utc.to_i
	begin
		job_id = message['job_id']
		result = plugin.run(message)
		@log.debug "Run returned for job #{job_id} with #{result}"
		@log.debug result
		ok = result[:ok]
		to_return = result[:message]
	rescue => exc
		@log.error "Failure during execution of plugin #{plugin} due to #{exc}"
		ok = false
		if result.nil?
			to_return = exc.message
		else
			to_return = result[:message] 
		end
	ensure
		data = { :run_start => run_start, :run_end => Time.now.utc.to_i, :agent_uid => @agent_id, :ok => ok }
		data = ok ? data.merge({ :run_result => to_return }) : data.merge({ :fail_reason => to_return })
		begin
			@log.debug "Posting results for job #{job_id} back to the server #{data}"
			@quartz.post_results(job_id, data)
		rescue => e
			@log.error "Failed to post results back to server due to #{e}"
		end
	end
end

def pulsate
	@log.debug "Pulsate"
	begin
		@quartz.pulse 
	rescue => exc
		@log.error "Failed to pulsate due to #{exc.message}"
	end
end

def run
	EM.run{
		Signal.trap('INT') { @log.debug("trapped INT signal"); stop(true) }
		Signal.trap('TERM'){ @log.debug("trapped TERM signal"); stop(true) }

	    # pulse
	    pulsate
	    begin 

	    	EM.add_periodic_timer 60 do  
	    		pulsate
	    	end
	    rescue => exc
	    	@log.error "Unable to add EM timer due to: #{exc.message}"
	    	@log.error "#{exc.backtrace}"
	    	exit -1
	    end

	    if @realtime

	    	channel = "/user/#{@api_key}/agent/#{@agent_id}"
	    	@log.info "Listening to realtime notifications from '#{channel}' on '#{@faye_url}'" 

	    	client = Faye::Client.new(@faye_url)
	    	client.add_extension(ClientAuth.new(@api_key, @secret_key))
	    	client.subscribe("/user/#{@api_key}/agent/#{@agent_id}") do |message|
	    		if message['action'] == 'new_job'
	    			@log.info "Got realtime notice for a new job #{message}"
	    			get_job
	    		elsif message['action'] == 'unregister'
	    			@log.info "Got unregister notice #{message}"
	    			delete_config
	    			delete_pid
	    			EM.stop
	    		end
	    	end
	    else
	    	@log.info "Checking for new jobs every 5 seconds"
			EM.add_periodic_timer 5 do
				get_job
			end
		end
	}
end

public

@version = 1
str_version = "0.0.#{@version}"

config_file = 'cloud66.yaml'
@pid_file = 'c66-agent.pid'
@log_file = 'c66-agent.log'
@config_dir = File.join(File.expand_path('~'), '.cloud66')
@config_full = File.join(@config_dir, config_file)
@cb_tmp_dir = '/tmp/cloud66'
Dir.mkdir(@cb_tmp_dir) if !File.exists?(@cb_tmp_dir)

@pid_full = File.join(@cb_tmp_dir, @pid_file)
@log_full = File.join(@cb_tmp_dir, @log_file)
commands = %w[register unregister start stop]
@plugins = {}
command = nil


OptionParser.new do |opts|
	opts.banner = 	<<-EOF
	Cloud 66 Agent. v#{str_version} (c) 2012 Cloud 66
	For more information please visit http://cloud66.com

	Usage: c66-agent [register|unregister|start|stop] [options]

	Options:
	EOF

	opts.on('--url URL', 'Server URL') do |server_url|
		@url = server_url
	end
	@url ||= 'https://api.cloud66.com'

	opts.on('-d', '--no-daemon', 'Not in daemon mode') do |v|
		@daemon_mode = false
	end
	@daemon_mode ||= true

	opts.on('-p', '--pid PID', 'PID file path') do |v|
		@pid_full = v
	end

	opts.on('-l', '--log LOG', 'Full log file path') do |v|
		@log_full = v
	end

	opts.on('-n', '--name NAME', 'Name of this agent') do |v|
		@name = v
	end
	@name = Socket.gethostname if @name.nil? || @name.empty?

	opts.on('-c', '--config CONFIG', 'Config file path') do |v|
		@config_full = v
	end

	opts.on('--sockets SOCKETS', 'Sockets URL') do |v|
		@faye_url = v
	end
	@faye_url ||= 'https://sockets.cloud66.com/push'

	opts.on('--api-key APIKEY', 'API key') do |v|
		@api_key = v
	end
	@api_key ||= ''

	opts.on('--secret-key SECRETKET', 'Secret Key') do |v|
		@secret_key = v
	end
	@secret_key ||= ''

	opts.on('--stack STACKIUD', 'Stack id') do |v|
		@stack_uid = v
	end

	opts.on('-r', '--realtime', 'Enable realtime notifications (default)') do |v|
		@realtime = true
	end
	opts.on('-R', '--no-realtime', 'Disable realtime notifications') do |v|
		@realtime = false
	end
	@realtime ||= true

	opts.on_tail("-h", "--help", "Show this message") do
		puts opts
		puts <<-EOF

		Commands:
		register 			Register the Cloud 66 Agent
		start 				Starts the Cloud 66 Agent as a deamon
		stop 				Stops the Cloud 66 Agent daemon
		unregister			Unregisters the Cloud 66 Agent

		EOF
		exit 0
	end
end.parse!

#set logging output
@log = @daemon_mode ? Logger.new(@log_full) : Logger.new(STDOUT)
@log.level = Logger::DEBUG

#return status information
command = ARGV[0].downcase unless ARGV[0].nil?
if command.nil? || command.empty?
	status = get_status
	puts "Started (use --help for commands)" if status == ST_STARTED
	puts "Stopped (use --help for commands)" if status == ST_STOPPED
	puts "Unregistered (use --help for commands)" if status == ST_UNREGISTERED
	exit -1
end

unless commands.include?(command)
	puts 'Invalid command. Use --help for more information'
	exit -1
end

begin
	send(command)
rescue => exc
	@log.error exc.message
	puts "An error has occurred: #{exc.message}"
	exit -1
end

